/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.SchoolRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class School extends TableImpl<SchoolRecord> {

    private static final long serialVersionUID = 1022998067;

    /**
     * The reference instance of <code>DMS.SCHOOL</code>
     */
    public static final School SCHOOL = new School();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolRecord> getRecordType() {
        return SchoolRecord.class;
    }

    /**
     * The column <code>DMS.SCHOOL.SCHOOL_ID</code>.
     */
    public final TableField<SchoolRecord, Integer> SCHOOL_ID = createField("SCHOOL_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>DMS.SCHOOL.SCHOOL_NAME</code>.
     */
    public final TableField<SchoolRecord, String> SCHOOL_NAME = createField("SCHOOL_NAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * Create a <code>DMS.SCHOOL</code> table reference
     */
    public School() {
        this(DSL.name("SCHOOL"), null);
    }

    /**
     * Create an aliased <code>DMS.SCHOOL</code> table reference
     */
    public School(String alias) {
        this(DSL.name(alias), SCHOOL);
    }

    /**
     * Create an aliased <code>DMS.SCHOOL</code> table reference
     */
    public School(Name alias) {
        this(alias, SCHOOL);
    }

    private School(Name alias, Table<SchoolRecord> aliased) {
        this(alias, aliased, null);
    }

    private School(Name alias, Table<SchoolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_9);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SchoolRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHOOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SchoolRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchoolRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolRecord>>asList(Keys.CONSTRAINT_9);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public School as(String alias) {
        return new School(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public School as(Name alias) {
        return new School(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public School rename(String name) {
        return new School(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public School rename(Name name) {
        return new School(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.UsersTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersType extends TableImpl<UsersTypeRecord> {

    private static final long serialVersionUID = 1245457266;

    /**
     * The reference instance of <code>DMS.USERS_TYPE</code>
     */
    public static final UsersType USERS_TYPE = new UsersType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersTypeRecord> getRecordType() {
        return UsersTypeRecord.class;
    }

    /**
     * The column <code>DMS.USERS_TYPE.USERS_TYPE_ID</code>.
     */
    public final TableField<UsersTypeRecord, Integer> USERS_TYPE_ID = createField("USERS_TYPE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>DMS.USERS_TYPE.USERS_TYPE_NAME</code>.
     */
    public final TableField<UsersTypeRecord, String> USERS_TYPE_NAME = createField("USERS_TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>DMS.USERS_TYPE</code> table reference
     */
    public UsersType() {
        this(DSL.name("USERS_TYPE"), null);
    }

    /**
     * Create an aliased <code>DMS.USERS_TYPE</code> table reference
     */
    public UsersType(String alias) {
        this(DSL.name(alias), USERS_TYPE);
    }

    /**
     * Create an aliased <code>DMS.USERS_TYPE</code> table reference
     */
    public UsersType(Name alias) {
        this(alias, USERS_TYPE);
    }

    private UsersType(Name alias, Table<UsersTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersType(Name alias, Table<UsersTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_B, Indexes.PRIMARY_KEY_B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsersTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERS_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersTypeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersTypeRecord>>asList(Keys.CONSTRAINT_B, Keys.CONSTRAINT_B3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersType as(String alias) {
        return new UsersType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersType as(Name alias) {
        return new UsersType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersType rename(String name) {
        return new UsersType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersType rename(Name name) {
        return new UsersType(name, null);
    }
}

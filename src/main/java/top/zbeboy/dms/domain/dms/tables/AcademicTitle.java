/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.AcademicTitleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicTitle extends TableImpl<AcademicTitleRecord> {

    private static final long serialVersionUID = -1502673673;

    /**
     * The reference instance of <code>DMS.ACADEMIC_TITLE</code>
     */
    public static final AcademicTitle ACADEMIC_TITLE = new AcademicTitle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AcademicTitleRecord> getRecordType() {
        return AcademicTitleRecord.class;
    }

    /**
     * The column <code>DMS.ACADEMIC_TITLE.ACADEMIC_TITLE_ID</code>.
     */
    public final TableField<AcademicTitleRecord, Integer> ACADEMIC_TITLE_ID = createField("ACADEMIC_TITLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>DMS.ACADEMIC_TITLE.ACADEMIC_TITLE_NAME</code>.
     */
    public final TableField<AcademicTitleRecord, String> ACADEMIC_TITLE_NAME = createField("ACADEMIC_TITLE_NAME", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * Create a <code>DMS.ACADEMIC_TITLE</code> table reference
     */
    public AcademicTitle() {
        this(DSL.name("ACADEMIC_TITLE"), null);
    }

    /**
     * Create an aliased <code>DMS.ACADEMIC_TITLE</code> table reference
     */
    public AcademicTitle(String alias) {
        this(DSL.name(alias), ACADEMIC_TITLE);
    }

    /**
     * Create an aliased <code>DMS.ACADEMIC_TITLE</code> table reference
     */
    public AcademicTitle(Name alias) {
        this(alias, ACADEMIC_TITLE);
    }

    private AcademicTitle(Name alias, Table<AcademicTitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private AcademicTitle(Name alias, Table<AcademicTitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AcademicTitleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACADEMIC_TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AcademicTitleRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AcademicTitleRecord>> getKeys() {
        return Arrays.<UniqueKey<AcademicTitleRecord>>asList(Keys.CONSTRAINT_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AcademicTitle as(String alias) {
        return new AcademicTitle(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AcademicTitle as(Name alias) {
        return new AcademicTitle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AcademicTitle rename(String name) {
        return new AcademicTitle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AcademicTitle rename(Name name) {
        return new AcademicTitle(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.QualityApplyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QualityApply extends TableImpl<QualityApplyRecord> {

    private static final long serialVersionUID = 527574634;

    /**
     * The reference instance of <code>DMS.QUALITY_APPLY</code>
     */
    public static final QualityApply QUALITY_APPLY = new QualityApply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QualityApplyRecord> getRecordType() {
        return QualityApplyRecord.class;
    }

    /**
     * The column <code>DMS.QUALITY_APPLY.QUALITY_APPLY_ID</code>.
     */
    public final TableField<QualityApplyRecord, String> QUALITY_APPLY_ID = createField("QUALITY_APPLY_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>DMS.QUALITY_APPLY.STUDENT_ID</code>.
     */
    public final TableField<QualityApplyRecord, Integer> STUDENT_ID = createField("STUDENT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DMS.QUALITY_APPLY.APPLY_CONTENT</code>.
     */
    public final TableField<QualityApplyRecord, String> APPLY_CONTENT = createField("APPLY_CONTENT", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>DMS.QUALITY_APPLY.APPLY_STATE</code>.
     */
    public final TableField<QualityApplyRecord, Integer> APPLY_STATE = createField("APPLY_STATE", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>DMS.QUALITY_APPLY.APPLY_DATE</code>.
     */
    public final TableField<QualityApplyRecord, Timestamp> APPLY_DATE = createField("APPLY_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>DMS.QUALITY_APPLY.QUALITY_RELEASE_ID</code>.
     */
    public final TableField<QualityApplyRecord, String> QUALITY_RELEASE_ID = createField("QUALITY_RELEASE_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>DMS.QUALITY_APPLY</code> table reference
     */
    public QualityApply() {
        this(DSL.name("QUALITY_APPLY"), null);
    }

    /**
     * Create an aliased <code>DMS.QUALITY_APPLY</code> table reference
     */
    public QualityApply(String alias) {
        this(DSL.name(alias), QUALITY_APPLY);
    }

    /**
     * Create an aliased <code>DMS.QUALITY_APPLY</code> table reference
     */
    public QualityApply(Name alias) {
        this(alias, QUALITY_APPLY);
    }

    private QualityApply(Name alias, Table<QualityApplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private QualityApply(Name alias, Table<QualityApplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_C, Indexes.CONSTRAINT_INDEX_C0, Indexes.PRIMARY_KEY_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QualityApplyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QualityApplyRecord>> getKeys() {
        return Arrays.<UniqueKey<QualityApplyRecord>>asList(Keys.CONSTRAINT_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QualityApplyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QualityApplyRecord, ?>>asList(Keys.CONSTRAINT_C0, Keys.CONSTRAINT_C09);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QualityApply as(String alias) {
        return new QualityApply(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QualityApply as(Name alias) {
        return new QualityApply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QualityApply rename(String name) {
        return new QualityApply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QualityApply rename(Name name) {
        return new QualityApply(name, null);
    }
}

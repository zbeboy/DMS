/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.CreditRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credit extends TableImpl<CreditRecord> {

    private static final long serialVersionUID = -937043867;

    /**
     * The reference instance of <code>DMS.CREDIT</code>
     */
    public static final Credit CREDIT = new Credit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CreditRecord> getRecordType() {
        return CreditRecord.class;
    }

    /**
     * The column <code>DMS.CREDIT.CREDIT_ID</code>.
     */
    public final TableField<CreditRecord, Integer> CREDIT_ID = createField("CREDIT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>DMS.CREDIT.STUDENT_NUMBER</code>.
     */
    public final TableField<CreditRecord, String> STUDENT_NUMBER = createField("STUDENT_NUMBER", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>DMS.CREDIT.YEAR</code>.
     */
    public final TableField<CreditRecord, String> YEAR = createField("YEAR", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>DMS.CREDIT.TERM</code>.
     */
    public final TableField<CreditRecord, Integer> TERM = createField("TERM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DMS.CREDIT.SPORTS</code>.
     */
    public final TableField<CreditRecord, Double> SPORTS = createField("SPORTS", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.SKILLS</code>.
     */
    public final TableField<CreditRecord, Double> SKILLS = createField("SKILLS", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.VOLUNTARY</code>.
     */
    public final TableField<CreditRecord, Double> VOLUNTARY = createField("VOLUNTARY", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.TECHNOLOGICAL</code>.
     */
    public final TableField<CreditRecord, Double> TECHNOLOGICAL = createField("TECHNOLOGICAL", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.POST</code>.
     */
    public final TableField<CreditRecord, Double> POST = createField("POST", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.IDEOLOGICAL</code>.
     */
    public final TableField<CreditRecord, Double> IDEOLOGICAL = createField("IDEOLOGICAL", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.PRACTICAL</code>.
     */
    public final TableField<CreditRecord, Double> PRACTICAL = createField("PRACTICAL", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.WORK</code>.
     */
    public final TableField<CreditRecord, Double> WORK = createField("WORK", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DMS.CREDIT.ACHIEVEMENT</code>.
     */
    public final TableField<CreditRecord, Double> ACHIEVEMENT = createField("ACHIEVEMENT", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>DMS.CREDIT</code> table reference
     */
    public Credit() {
        this(DSL.name("CREDIT"), null);
    }

    /**
     * Create an aliased <code>DMS.CREDIT</code> table reference
     */
    public Credit(String alias) {
        this(DSL.name(alias), CREDIT);
    }

    /**
     * Create an aliased <code>DMS.CREDIT</code> table reference
     */
    public Credit(Name alias) {
        this(alias, CREDIT);
    }

    private Credit(Name alias, Table<CreditRecord> aliased) {
        this(alias, aliased, null);
    }

    private Credit(Name alias, Table<CreditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_76);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CreditRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CREDIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CreditRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_76;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CreditRecord>> getKeys() {
        return Arrays.<UniqueKey<CreditRecord>>asList(Keys.CONSTRAINT_76);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credit as(String alias) {
        return new Credit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credit as(Name alias) {
        return new Credit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credit rename(String name) {
        return new Credit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credit rename(Name name) {
        return new Credit(name, null);
    }
}

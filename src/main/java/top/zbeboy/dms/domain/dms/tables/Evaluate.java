/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.EvaluateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Evaluate extends TableImpl<EvaluateRecord> {

    private static final long serialVersionUID = -861195746;

    /**
     * The reference instance of <code>DMS.EVALUATE</code>
     */
    public static final Evaluate EVALUATE = new Evaluate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvaluateRecord> getRecordType() {
        return EvaluateRecord.class;
    }

    /**
     * The column <code>DMS.EVALUATE.EVALUATE_ID</code>.
     */
    public final TableField<EvaluateRecord, String> EVALUATE_ID = createField("EVALUATE_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>DMS.EVALUATE.EVALUATE_CONTENT</code>.
     */
    public final TableField<EvaluateRecord, String> EVALUATE_CONTENT = createField("EVALUATE_CONTENT", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>DMS.EVALUATE</code> table reference
     */
    public Evaluate() {
        this(DSL.name("EVALUATE"), null);
    }

    /**
     * Create an aliased <code>DMS.EVALUATE</code> table reference
     */
    public Evaluate(String alias) {
        this(DSL.name(alias), EVALUATE);
    }

    /**
     * Create an aliased <code>DMS.EVALUATE</code> table reference
     */
    public Evaluate(Name alias) {
        this(alias, EVALUATE);
    }

    private Evaluate(Name alias, Table<EvaluateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Evaluate(Name alias, Table<EvaluateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_38);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EvaluateRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_38;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EvaluateRecord>> getKeys() {
        return Arrays.<UniqueKey<EvaluateRecord>>asList(Keys.CONSTRAINT_38);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Evaluate as(String alias) {
        return new Evaluate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Evaluate as(Name alias) {
        return new Evaluate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluate rename(String name) {
        return new Evaluate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluate rename(Name name) {
        return new Evaluate(name, null);
    }
}

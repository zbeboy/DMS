/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.dms.domain.dms.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.dms.domain.dms.Dms;
import top.zbeboy.dms.domain.dms.Indexes;
import top.zbeboy.dms.domain.dms.Keys;
import top.zbeboy.dms.domain.dms.tables.records.UsersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1891927205;

    /**
     * The reference instance of <code>DMS.USERS</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>DMS.USERS.USERNAME</code>.
     */
    public final TableField<UsersRecord, String> USERNAME = createField("USERNAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.PASSWORD</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField("PASSWORD", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.ENABLED</code>.
     */
    public final TableField<UsersRecord, Boolean> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.ACCOUNT_NON_EXPIRED</code>.
     */
    public final TableField<UsersRecord, Boolean> ACCOUNT_NON_EXPIRED = createField("ACCOUNT_NON_EXPIRED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.CREDENTIALS_NON_EXPIRED</code>.
     */
    public final TableField<UsersRecord, Boolean> CREDENTIALS_NON_EXPIRED = createField("CREDENTIALS_NON_EXPIRED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.ACCOUNT_NON_LOCKED</code>.
     */
    public final TableField<UsersRecord, Boolean> ACCOUNT_NON_LOCKED = createField("ACCOUNT_NON_LOCKED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.AGREE_PROTOCOL</code>.
     */
    public final TableField<UsersRecord, Boolean> AGREE_PROTOCOL = createField("AGREE_PROTOCOL", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.USERS_TYPE_ID</code>.
     */
    public final TableField<UsersRecord, Integer> USERS_TYPE_ID = createField("USERS_TYPE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DMS.USERS.REAL_NAME</code>.
     */
    public final TableField<UsersRecord, String> REAL_NAME = createField("REAL_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>DMS.USERS.AVATAR</code>.
     */
    public final TableField<UsersRecord, String> AVATAR = createField("AVATAR", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>DMS.USERS.JOIN_DATE</code>.
     */
    public final TableField<UsersRecord, Date> JOIN_DATE = createField("JOIN_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>DMS.USERS</code> table reference
     */
    public Users() {
        this(DSL.name("USERS"), null);
    }

    /**
     * Create an aliased <code>DMS.USERS</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>DMS.USERS</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dms.DMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_4, Indexes.CONSTRAINT_INDEX_4D, Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.CONSTRAINT_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRecord, ?>>asList(Keys.CONSTRAINT_4D, Keys.CONSTRAINT_4D4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }
}
